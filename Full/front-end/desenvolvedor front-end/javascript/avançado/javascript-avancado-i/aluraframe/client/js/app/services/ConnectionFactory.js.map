{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AAEH,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAChB,UAAL,EAAiB;;AAEbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBA5BM,CAAP;AA6BH;;;iDAEmBtB,U,EAAY;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAND;AAOH;;;sDAEwB;;AAErB,4BAAI7B,UAAJ,EAAgB;;AAEZC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\n\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n\r\n        throw new Error('Não é possível instânciar esta classe');\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n\r\n                ConnectionFactory._createStore(e.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                if (!connection) {\r\n\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                        throw new Error('Não é possível fechar diretamente a conexão');\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            };\r\n        })\r\n    }\r\n\r\n    static _createStore(connection) {\r\n\r\n        stores.forEach(store => {\r\n\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store, { autoIncrement: true });\r\n        })\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if (connection) {\r\n\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n// /* ------------------------------------- MODULE PATTERN --------------------------------------------- */\r\n\r\n// /* OBS.(Um módulo é uma unidade confinada que ninguém possui acesso dentro dele. Com isso estamos\r\n//         impossibilitando o acesso às variáveis globais declaradas dentro da função anônima autoinvocada (IIFE).\r\n//         Para realizar este padrão, colocamos a função dentro de um parênteses e logo em seguida abrimos e \r\n//         fechamos outro parênteses(function(){})().Os parênteses após a função anônima irão invocá-la \r\n//         automaticamente, fazendo com que simultaneamente ela seja carregada e executada.*/\r\n\r\n// var ConnectionFactory = (function() {\r\n\r\n//     /* Utilizando a declaração de variável CONST não poderemos reatribuir valor \r\n//     à essas variáveis. Tornando assim essas variáveis IMUTÁVEIS já que não queremos\r\n//     que seus valores sejam reatribuidos */\r\n//     const stores = ['negociacoes'];\r\n//     const version = 4;\r\n//     const dbName = 'aluraframe';\r\n//     /*Declaração da variável fora da classe para que a conexão \r\n//     seja sempre a mesma quando chamar o método getConnection();*/\r\n//     var connection = null;\r\n\r\n//     var close = null;\r\n\r\n//     return class ConnectionFactory {\r\n\r\n//         constructor() {\r\n\r\n//             throw new Error('Não é possível instânciar esta classe');\r\n//         }\r\n\r\n//         static getConnection() {\r\n\r\n//             return new Promise((resolve, reject) => {\r\n\r\n//                 let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n//                 openRequest.onupgradeneeded = e => {\r\n\r\n//                     ConnectionFactory._createStore(e.target.result);\r\n\r\n//                 };\r\n\r\n//                 openRequest.onsuccess = e => {\r\n\r\n//                     if (!connection) {\r\n\r\n//                         connection = e.target.result;\r\n//                         /* Com o método BIND, estamos dizendo para o THIS dentro da função close()\r\n//                         manter a referência ao objeto CONNECTION. Se passarmos a função para a\r\n//                         variável close sem o BIND, o THIS irá perder a referência à CONNECTION e\r\n//                         quando executarmos o close (nossa variável que recebeu a função original)\r\n//                         no método closeConnectio() irá ocorrer um erro devido ao THIS não referenciar\r\n//                         nenhum objeto. */\r\n//                         close = connection.close.bind(connection);\r\n//                         /* MONKEY PATCH: Sobrescrevemos a função close() do CONNECTION para que\r\n//                         não seja fechada diretamente em outras partes da aplicação, já que a conexão\r\n//                         é sempre a mesma. */\r\n//                         connection.close = function() {\r\n//                             throw new Error('Não é possível fechar diretamente a conexão');\r\n//                         };\r\n//                     }\r\n//                     resolve(connection);\r\n//                 };\r\n\r\n//                 openRequest.onerror = e => {\r\n\r\n//                     console.log(e.target.error);\r\n//                     reject(e.target.error.name);\r\n//                 };\r\n//             })\r\n//         }\r\n\r\n//         static _createStore(connection) {\r\n\r\n//             stores.forEach(store => {\r\n\r\n//                 if (connection.objectStoreNames.contains(store))\r\n//                     connection.deleteObjectStore(store);\r\n\r\n//                 connection.createObjectStore(store, { autoIncrement: true });\r\n//             })\r\n//         }\r\n\r\n//         static closeConnection() {\r\n\r\n//             if (connection) {\r\n\r\n//                 close();\r\n//                 connection = null;\r\n//             }\r\n//         }\r\n//     }\r\n// })();"]}