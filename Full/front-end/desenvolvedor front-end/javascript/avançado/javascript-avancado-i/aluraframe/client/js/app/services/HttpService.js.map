{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","resp","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,I,EAAM;;AAEhB,4BAAI,CAACA,KAAKC,EAAV,EAAc,MAAM,IAAIC,KAAJ,CAAUF,KAAKG,UAAf,CAAN;AACd,+BAAOH,IAAP;AACH;;;wCAEGI,G,EAAK;AAAA;;AAEL;;;;;AAKA,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAQ,MAAKC,aAAL,CAAmBP,IAAnB,CAAR;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAQN,KAAKQ,IAAL,EAAR;AAAA,yBAFH,CAAP;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;AAoCH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ;;AAEA,+BAAOJ,MAAMD,GAAN,EAAW;AACVM,qCAAS,EAAE,gBAAgB,kBAAlB,EADC;AAEVC,oCAAQ,MAFE;AAGVC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHI,yBAAX,EAKFH,IALE,CAKG;AAAA,mCAAQ,OAAKC,aAAL,CAAmBP,IAAnB,CAAR;AAAA,yBALH,CAAP;;AAOA;;;;;;;;;;;;;;;;;;AAwBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErrors(resp) {\r\n\r\n        if (!resp.ok) throw new Error(resp.statusText);\r\n        return resp;\r\n    }\r\n\r\n    get(url) {\r\n\r\n        /* OBS.(A variável global FETCH pertence à uma API do JavaScript que trabalha automaticamente\r\n                com as requisições AJAX e retorna uma Promise, sendo assim, podendo capturar sua\r\n                resposta no THEN(). Para tratativa de erros temos o RESP.OK que seria o status da\r\n                requisição que retorna um boolean TRUE(200<=status<300), caso retorne FALSE \r\n                lançamos um Error para que seja pego pelo CATCH na NegociacaoService) */\r\n        return fetch(url)\r\n            .then(resp => this._handleErrors(resp))\r\n            .then(resp => resp.json());\r\n\r\n        /* return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            //Método da requisição e o endereço do servidor\r\n            xhr.open('GET', url);\r\n\r\n            //Obter os dados do servidor no estado onde a resposta é enviada pelo servidor\r\n            //ESTADOS:\r\n\r\n            // 0: requisição ainda não iniciada\r\n            // 1: conexão com o servidor estabelecida\r\n            // 2: requisição recebida\r\n            // 3: processando requisição\r\n            // 4: requisição está concluída e a resposta está pronta (ESTADO DE RESPOSTA DO SERVIDOR NA REQUISIÇÃO AJAX)\r\n\r\n            //Executa a função que implementamos no estado de resposta do servidor. STATE 4\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    //Obtemos a resposta apenas se a conexão for OK(200)\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.response);\r\n                        console.log(xhr.response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            xhr.send();\r\n        }) */\r\n\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        /* OBS.(O segundo parâmetro do FETCH é um objeto JavaScript na qual configuramos\r\n                seus \"atributos\" HEADERS, METHOD e BODY para que possamos realizar um POST.) */\r\n        return fetch(url, {\r\n                headers: { 'Content-type': 'application/json' },\r\n                method: 'post',\r\n                body: JSON.stringify(dado)\r\n            })\r\n            .then(resp => this._handleErrors(resp));\r\n\r\n        /* return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            // Para se realizar um POST é necessário informar ao cabeçalho(HEADER)\r\n            // o conteúdo do dado (CONTENT-TYPE) e seu respectivo tipo(Neste caso:\r\n            // 'application/json') \r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        }); */\r\n\r\n    }\r\n}"]}