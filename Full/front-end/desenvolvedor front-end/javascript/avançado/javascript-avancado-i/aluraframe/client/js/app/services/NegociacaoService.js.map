{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDAO","Negociacao","NegociacaoService","_http","negociacao","getConnection","then","connection","dao","adiciona","catch","Error","erro","listaTodos","apagaTodos","Promise","all","_obterNegociacoesDaSemana","_obterNegociacoesDaSemanaAnterior","_obterNegociacoesDaSemanaRetrasada","arrayDeNegociacoes","reduce","flatArray","array","concat","listaAtual","obterNegociacoes","negociacoesService","filter","some","negociacaoService","isEquals","negociacaoLista","get","negociacoes","map","Date","objeto","data","quantidade","valor"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDAO } from '../dao/NegociacaoDAO';\r\nimport { Negociacao } from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    cadastrar(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao adicionada com sucesso.')\r\n            .catch(erro => { throw new Error(erro) });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => { throw new Error(erro) });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .catch(erro => { throw new Error(erro) });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n                this._obterNegociacoesDaSemana(),\r\n                this._obterNegociacoesDaSemanaAnterior(),\r\n                this._obterNegociacoesDaSemanaRetrasada()\r\n            ])\r\n            .then(arrayDeNegociacoes => {\r\n                return arrayDeNegociacoes\r\n                    .reduce((flatArray, array) => flatArray.concat(array), []);\r\n            })\r\n            .catch(erro => { throw new Error(erro) });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoesService =>\r\n                negociacoesService.filter(negociacaoService =>\r\n                    !listaAtual.some(negociacaoLista =>\r\n                        negociacaoService.isEquals(negociacaoLista)))\r\n            );\r\n    }\r\n\r\n\r\n    /* ---------------------- PROMISE PATTERN RESOLUTION ---------------------------- */\r\n\r\n\r\n    /* OBS.(O construtor de Promise recebe uma função com os parâmetros RESOLVE e REJECT\r\n        que também são funções e são executadas através de uma CALLBACK, os métodos\r\n            THEN pegam o retorno de RESOLVE e o CATCH do REJECT) */\r\n    _obterNegociacoesDaSemana() {\r\n\r\n        //Retorna a instância da Promise criada na HttpService\r\n        return this._http.get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n            })\r\n            .catch(erro => { throw new Error('Não foi possível importar as negociações da semana.') });\r\n    }\r\n\r\n\r\n    _obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return this._http.get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n            })\r\n            .catch(erro => { throw new Error('Não foi possível importar as negociações da semana anterior.') });\r\n    }\r\n\r\n    _obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return this._http.get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                return negociacoes\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n            })\r\n            .catch(erro => { throw new Error('Não foi possível importar as negociações da retrasada.') });\r\n    }\r\n\r\n\r\n\r\n    /* -----------CALLBACK RESOLUTION---------------\r\n        \r\n            obterNegociacoesDaSemana(callback) {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            //Método da requisição e o endereço do servidor\r\n            xhr.open('GET', 'negociacoes/semana');\r\n\r\n            //Obter os dados do servidor no estado onde a resposta é enviada pelo servidor\r\n            //ESTADOS:\r\n\r\n            // 0: requisição ainda não iniciada\r\n            // 1: conexão com o servidor estabelecida\r\n            // 2: requisição recebida\r\n            // 3: processando requisição\r\n            // 4: requisição está concluída e a resposta está pronta (ESTADO DE RESPOSTA DO SERVIDOR NA REQUISIÇÃO AJAX)\r\n\r\n            //Executa a função que implementamos no estado de resposta do servidor. STATE 4\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    //Obtemos a resposta apenas se a conexão for OK(200)\r\n                    if (xhr.status == 200) {\r\n\r\n                        callback(null, JSON.parse(xhr.responseText)\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                    } else {\r\n\r\n                        callback('Não foi possível importar as negociações da semana.', null);\r\n                        console.log(xhr.response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            xhr.send();\r\n        }\r\n\r\n\r\n        obterNegociacoesDaSemanaAnterior(callback) {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', 'negociacoes/anterior');\r\n\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        callback(null, JSON.parse(xhr.responseText)\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                    } else {\r\n\r\n                        callback('Não foi possível importar as negociações da semana anterior.', null);\r\n                        console.log(xhr.response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            xhr.send();\r\n        }\r\n\r\n        obterNegociacoesDaSemanaRetrasada(callback) {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open('GET', 'negociacoes/retrasada');\r\n\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        callback(null, JSON.parse(xhr.responseText)\r\n                            .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                    } else {\r\n\r\n                        callback('Não foi possível importar as negociações da semana retrasada.', null);\r\n                        console.log(xhr.response);\r\n                    }\r\n                }\r\n            }\r\n\r\n            xhr.send();\r\n        } */\r\n}"]}